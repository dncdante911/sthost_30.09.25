/**
 * ============================================
 * DASHBOARD JAVASCRIPT - StormHosting UA
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π JS –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * ============================================
 */

// ============================================
// –ì–õ–ê–í–ù–´–ô –ö–õ–ê–°–° –î–ê–®–ë–û–ê–†–î–ê
// ============================================
class StormDashboard {
    constructor() {
        this.isInitialized = false;
        this.updateInterval = null;
        this.notifications = [];
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            updateInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            apiBaseUrl: '/api',
            notificationTimeout: 5000
        };
        
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ–∞—Ä–¥–∞
     */
    init() {
        if (this.isInitialized) return;
        
        console.log('üöÄ Initializing StormHosting Dashboard...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.initVPSControls();
        this.initNotifications();
        this.initTooltips();
        this.initAutoUpdates();
        this.initAnimations();
        
        // –°–æ–±—ã—Ç–∏—è
        this.bindEvents();
        
        this.isInitialized = true;
        console.log('‚úÖ Dashboard initialized successfully!');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VPS —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    initVPSControls() {
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPS
        const vpsButtons = document.querySelectorAll('[data-vps-id]');
        
        vpsButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                const vpsId = button.dataset.vpsId;
                const action = this.getActionFromButton(button);
                
                if (vpsId && action) {
                    this.controlVPS(vpsId, action);
                }
            });
        });
        
        console.log(`üì° VPS controls initialized for ${vpsButtons.length} buttons`);
    }
    
    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPS
     */
    async controlVPS(vpsId, action) {
        const button = document.querySelector(`[data-vps-id="${vpsId}"].vps-${action}`);
        if (!button) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        const originalText = button.innerHTML;
        button.innerHTML = '<i class="bi bi-arrow-repeat spin"></i>';
        button.disabled = true;
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        if (action === 'stop') {
            const confirmed = await this.showConfirmation(
                '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPS?',
                `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPS?`,
                'warning'
            );
            if (!confirmed) {
                button.innerHTML = originalText;
                button.disabled = false;
                return;
            }
        }
        
        try {
            const response = await fetch('/client/vps/api/control.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                    vps_id: vpsId,
                    action: action,
                    csrf_token: this.getCSRFToken()
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                this.showNotification('success', `VPS ${action} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å VPS —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => this.updateVPSStatus(vpsId), 2000);
                
                // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è 2FA (–µ—Å–ª–∏ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ)
                this.logSecurityAction(`vps_${action}`, { vps_id: vpsId });
                
            } else {
                throw new Error(data.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏');
            }
            
        } catch (error) {
            console.error('VPS control error:', error);
            this.showNotification('error', error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ VPS');
        } finally {
            button.innerHTML = originalText;
            button.disabled = false;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ VPS
     */
    async updateVPSStatus(vpsId) {
        try {
            const response = await fetch(`/client/vps/api/status.php?id=${vpsId}`);
            const data = await response.json();
            
            if (data.success) {
                const statusElement = document.querySelector(`[data-vps-id="${vpsId}"]`)
                    ?.closest('.vps-item')
                    ?.querySelector('.status-badge');
                
                if (statusElement) {
                    statusElement.className = `status-badge status-${data.status}`;
                    statusElement.textContent = data.status;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                this.updateDashboardStats();
            }
        } catch (error) {
            console.error('Status update error:', error);
        }
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ
     */
    getActionFromButton(button) {
        if (button.classList.contains('vps-start')) return 'start';
        if (button.classList.contains('vps-stop')) return 'stop';
        if (button.classList.contains('vps-restart')) return 'restart';
        return null;
    }
    
    /**
     * –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    initNotifications() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (!document.getElementById('notification-container')) {
            const container = document.createElement('div');
            container.id = 'notification-container';
            container.className = 'notification-container';
            document.body.appendChild(container);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showNotification(type, message, duration = null) {
        const container = document.getElementById('notification-container');
        const notification = document.createElement('div');
        const id = 'notification-' + Date.now();
        
        notification.id = id;
        notification.className = `notification notification-${type} notification-enter`;
        
        const icons = {
            success: 'check-circle',
            error: 'exclamation-circle',
            warning: 'exclamation-triangle',
            info: 'info-circle'
        };
        
        notification.innerHTML = `
            <div class="notification-content">
                <i class="bi bi-${icons[type] || 'info-circle'}"></i>
                <span>${message}</span>
            </div>
            <button class="notification-close" onclick="dashboard.closeNotification('${id}')">
                <i class="bi bi-x"></i>
            </button>
        `;
        
        container.appendChild(notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.classList.remove('notification-enter');
        }, 100);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        const timeout = duration || this.config.notificationTimeout;
        setTimeout(() => {
            this.closeNotification(id);
        }, timeout);
        
        this.notifications.push({ id, element: notification });
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    closeNotification(id) {
        const notification = document.getElementById(id);
        if (!notification) return;
        
        notification.classList.add('notification-exit');
        
        setTimeout(() => {
            notification.remove();
            this.notifications = this.notifications.filter(n => n.id !== id);
        }, 300);
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
     */
    async showConfirmation(title, message, type = 'info') {
        return new Promise((resolve) => {
            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const modal = document.createElement('div');
            modal.className = 'confirmation-modal';
            modal.innerHTML = `
                <div class="confirmation-overlay"></div>
                <div class="confirmation-dialog">
                    <div class="confirmation-header">
                        <h5>${title}</h5>
                    </div>
                    <div class="confirmation-body">
                        <p>${message}</p>
                    </div>
                    <div class="confirmation-actions">
                        <button class="btn btn-secondary" onclick="closeConfirmation(false)">–û—Ç–º–µ–Ω–∞</button>
                        <button class="btn btn-${type === 'warning' ? 'danger' : 'primary'}" onclick="closeConfirmation(true)">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
                    </div>
                </div>
            `;
            
            // –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
            window.closeConfirmation = (result) => {
                modal.remove();
                delete window.closeConfirmation;
                resolve(result);
            };
            
            document.body.appendChild(modal);
        });
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É–ª—Ç–∏–ø–æ–≤
     */
    initTooltips() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bootstrap tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(tooltipTriggerEl => {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    }
    
    /**
     * –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    initAutoUpdates() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.updateInterval = setInterval(() => {
            this.updateDashboardStats();
        }, this.config.updateInterval);
        
        console.log('üîÑ Auto-updates enabled');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ–∞—Ä–¥–∞
     */
    async updateDashboardStats() {
        try {
            const response = await fetch('/api/dashboard/stats.php');
            const data = await response.json();
            
            if (data.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                this.updateStatsCounters(data.stats);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                if (data.stats.balance !== undefined) {
                    const balanceEl = document.querySelector('.balance-amount');
                    if (balanceEl) {
                        balanceEl.textContent = `${data.stats.balance.toFixed(2)} –≥—Ä–Ω`;
                    }
                }
            }
        } catch (error) {
            console.error('Stats update error:', error);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatsCounters(stats) {
        const counters = {
            'vps': stats.vps,
            'domains': stats.domains,
            'hosting': stats.hosting,
            'invoices': stats.pending_invoices
        };
        
        Object.entries(counters).forEach(([key, value]) => {
            const counter = document.querySelector(`.stats-${key} h3`);
            if (counter && counter.textContent != value) {
                this.animateCounter(counter, parseInt(counter.textContent) || 0, value);
            }
        });
    }
    
    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
     */
    animateCounter(element, from, to) {
        const duration = 1000;
        const steps = 30;
        const stepValue = (to - from) / steps;
        const stepDuration = duration / steps;
        
        let current = from;
        let step = 0;
        
        const timer = setInterval(() => {
            step++;
            current += stepValue;
            
            if (step >= steps) {
                current = to;
                clearInterval(timer);
            }
            
            element.textContent = Math.round(current);
        }, stepDuration);
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
     */
    initAnimations() {
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate-in');
                }
            });
        }, observerOptions);
        
        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
        document.querySelectorAll('.content-card, .stats-card').forEach(card => {
            observer.observe(card);
        });
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π
        document.addEventListener('keydown', (e) => {
            // Ctrl + R - –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if (e.ctrlKey && e.key === 'r') {
                e.preventDefault();
                this.updateDashboardStats();
                this.showNotification('info', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if (this.updateInterval) {
                    clearInterval(this.updateInterval);
                }
            } else {
                // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–∏–º–∞ - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                this.initAutoUpdates();
                this.updateDashboardStats();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
        window.addEventListener('online', () => {
            this.showNotification('success', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            this.updateDashboardStats();
        });
        
        window.addEventListener('offline', () => {
            this.showNotification('warning', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ', 10000);
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞
     */
    getCSRFToken() {
        const token = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
        return token || '';
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–¥–ª—è –±—É–¥—É—â–µ–π SMS 2FA)
     */
    logSecurityAction(action, details = {}) {
        // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ SMS 2FA
        /*
        fetch('/api/security/log.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
                action: action,
                details: details,
                timestamp: new Date().toISOString(),
                csrf_token: this.getCSRFToken()
            })
        }).catch(console.error);
        */
        console.log('Security action logged:', action, details);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è 2FA (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
     */
    async checkRequire2FA(action) {
        // –ë—É–¥—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è SMS 2FA
        /*
        const criticalActions = ['vps_stop', 'vps_restart', 'password_change', 'delete_vps'];
        
        if (criticalActions.includes(action)) {
            try {
                const response = await fetch('/api/security/require-2fa.php', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ action, csrf_token: this.getCSRFToken() })
                });
                
                const data = await response.json();
                
                if (data.require_2fa) {
                    return await this.show2FADialog();
                }
            } catch (error) {
                console.error('2FA check error:', error);
            }
        }
        */
        
        return true; // –ü–æ–∫–∞ –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º
    }
    
    /**
     * –î–∏–∞–ª–æ–≥ 2FA (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
     */
    async show2FADialog() {
        /*
        return new Promise((resolve) => {
            const modal = document.createElement('div');
            modal.className = 'sms-2fa-modal';
            modal.innerHTML = `
                <div class="modal-overlay"></div>
                <div class="modal-dialog">
                    <div class="modal-header">
                        <h5>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ SMS</h5>
                    </div>
                    <div class="modal-body">
                        <p>–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:</p>
                        <input type="text" class="form-control" id="sms-code" placeholder="–ö–æ–¥ –∏–∑ SMS" maxlength="6">
                        <div class="sms-status mt-2"></div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" onclick="close2FA(false)">–û—Ç–º–µ–Ω–∞</button>
                        <button class="btn btn-primary" onclick="verify2FA()">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
                    </div>
                </div>
            `;
            
            window.close2FA = (result) => {
                modal.remove();
                delete window.close2FA;
                delete window.verify2FA;
                resolve(result);
            };
            
            window.verify2FA = async () => {
                const code = document.getElementById('sms-code').value;
                if (code.length !== 6) {
                    document.querySelector('.sms-status').innerHTML = 
                        '<div class="text-danger">–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥</div>';
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ API
                try {
                    const response = await fetch('/api/security/verify-2fa.php', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ code, csrf_token: this.getCSRFToken() })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        close2FA(true);
                    } else {
                        document.querySelector('.sms-status').innerHTML = 
                            '<div class="text-danger">–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥</div>';
                    }
                } catch (error) {
                    document.querySelector('.sms-status').innerHTML = 
                        '<div class="text-danger">–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞</div>';
                }
            };
            
            document.body.appendChild(modal);
            setTimeout(() => document.getElementById('sms-code').focus(), 100);
        });
        */
        return true;
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –¥–∞—à–±–æ–∞—Ä–¥–∞
     */
    destroy() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        this.notifications.forEach(notification => {
            this.closeNotification(notification.id);
        });
        
        this.isInitialized = false;
        console.log('üî• Dashboard destroyed');
    }
}

// ============================================
// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´
// ============================================

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
 */
class DashboardAPI {
    static async request(url, options = {}) {
        const defaultOptions = {
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        };
        
        try {
            const response = await fetch(url, { ...defaultOptions, ...options });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            return await response.json();
        } catch (error) {
            console.error('API request failed:', error);
            throw error;
        }
    }
    
    static async getVPSList() {
        return await this.request('/client/vps/api/list.php');
    }
    
    static async getVPSStats(vpsId) {
        return await this.request(`/client/vps/api/stats.php?id=${vpsId}`);
    }
    
    static async controlVPS(vpsId, action) {
        return await this.request('/client/vps/api/control.php', {
            method: 'POST',
            body: JSON.stringify({ vps_id: vpsId, action: action })
        });
    }
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
class PerformanceManager {
    static init() {
        // Prefetch –≤–∞–∂–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        this.prefetchPages();
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.monitorPerformance();
    }
    
    static prefetchPages() {
        const importantPages = [
            '/client/vps/',
            '/client/profile.php',
            '/pages/vps.php'
        ];
        
        importantPages.forEach(page => {
            const link = document.createElement('link');
            link.rel = 'prefetch';
            link.href = page;
            document.head.appendChild(link);
        });
    }
    
    static monitorPerformance() {
        if ('performance' in window) {
            window.addEventListener('load', () => {
                setTimeout(() => {
                    const perfData = performance.getEntriesByType('navigation')[0];
                    if (perfData) {
                        console.log(`üìä Page load: ${Math.round(perfData.loadEventEnd - perfData.loadEventStart)}ms`);
                        console.log(`üìä DOM ready: ${Math.round(perfData.domContentLoadedEventEnd - perfData.domContentLoadedEventStart)}ms`);
                    }
                }, 0);
            });
        }
    }
}

// ============================================
// CSS –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
// ============================================
const notificationStyles = `
<style>
.notification-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.notification {
    background: white;
    border-radius: 10px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    padding: 16px;
    min-width: 300px;
    max-width: 400px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-left: 4px solid #667eea;
    transition: all 0.3s ease;
}

.notification-success {
    border-left-color: #10b981;
}

.notification-error {
    border-left-color: #ef4444;
}

.notification-warning {
    border-left-color: #f59e0b;
}

.notification-content {
    display: flex;
    align-items: center;
    gap: 12px;
    flex: 1;
}

.notification-content i {
    font-size: 1.25rem;
}

.notification-success i {
    color: #10b981;
}

.notification-error i {
    color: #ef4444;
}

.notification-warning i {
    color: #f59e0b;
}

.notification-info i {
    color: #3b82f6;
}

.notification-close {
    background: none;
    border: none;
    color: #9ca3af;
    cursor: pointer;
    padding: 4px;
    border-radius: 4px;
    transition: color 0.2s;
}

.notification-close:hover {
    color: #6b7280;
    background: #f3f4f6;
}

.notification-enter {
    transform: translateX(100%);
    opacity: 0;
}

.notification-exit {
    transform: translateX(100%);
    opacity: 0;
}

.confirmation-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 10000;
    display: flex;
    align-items: center;
    justify-content: center;
}

.confirmation-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
}

.confirmation-dialog {
    background: white;
    border-radius: 16px;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
    max-width: 500px;
    width: 90%;
    position: relative;
    z-index: 1;
}

.confirmation-header {
    padding: 24px 24px 0;
}

.confirmation-header h5 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: #1f2937;
}

.confirmation-body {
    padding: 16px 24px 24px;
    color: #6b7280;
}

.confirmation-actions {
    padding: 0 24px 24px;
    display: flex;
    gap: 12px;
    justify-content: flex-end;
}

.spin {
    animation: spin 1s linear infinite;
}

@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

.animate-in {
    animation: slideInUp 0.6s ease forwards;
}

@media (max-width: 768px) {
    .notification-container {
        left: 20px;
        right: 20px;
    }
    
    .notification {
        min-width: auto;
        max-width: none;
    }
    
    .confirmation-dialog {
        margin: 20px;
        width: calc(100% - 40px);
    }
}
</style>
`;

// ============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ============================================
document.addEventListener('DOMContentLoaded', () => {
    console.log('üéØ Initializing StormHosting Dashboard...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    document.head.insertAdjacentHTML('beforeend', notificationStyles);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—à–±–æ–∞—Ä–¥
    window.dashboard = new StormDashboard();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    PerformanceManager.init();
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º API –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    window.DashboardAPI = DashboardAPI;
    
    console.log('üéâ Dashboard fully loaded and ready!');
    console.log(`
    üöÄ StormHosting UA Dashboard
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    Version: 2.0
    Features: VPS Management, Real-time Updates, Notifications
    Status: ‚úÖ Active
    
    Available commands:
    - dashboard.updateDashboardStats() - Update statistics
    - dashboard.showNotification(type, message) - Show notification
    - DashboardAPI.getVPSList() - Get VPS list via API
    `);
});

// ============================================
// –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
// ============================================
window.addEventListener('error', (event) => {
    console.error('Dashboard Error:', {
        message: event.message,
        source: event.filename,
        line: event.lineno,
        column: event.colno,
        error: event.error
    });
    
    if (window.dashboard) {
        window.dashboard.showNotification('error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ');
    }
});

window.addEventListener('unhandledrejection', (event) => {
    console.error('Unhandled Promise Rejection:', event.reason);
    
    if (window.dashboard) {
        window.dashboard.showNotification('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏');
    }
});

// ============================================
// –û–ß–ò–°–¢–ö–ê –ü–†–ò –£–•–û–î–ï –°–û –°–¢–†–ê–ù–ò–¶–´
// ============================================
window.addEventListener('beforeunload', () => {
    if (window.dashboard) {
        window.dashboard.destroy();
    }
});

// ============================================
// –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
// ============================================
if (typeof console !== 'undefined' && console.log) {
    // Easter egg –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    console.log(`
    %cüåü StormHosting UA - Advanced Dashboard
    %c‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    Made with ‚ù§Ô∏è by StormHosting Development Team
    
    –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –≤—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫! üë®‚Äçüíª
    –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ: jobs@sthost.pro
    `,
    'color: #667eea; font-size: 16px; font-weight: bold;',
    'color: #764ba2; font-size: 12px;'
    );
}